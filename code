#!/bin/bash

# Color codes for formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Predefined credentials for authentication
declare -A USERS
USERS=( ["admin"]="password123" ["teacher"]="teachpass" )

# Arrays for student records
declare -a ROLL_NUMBERS
declare -a NAMES
declare -a OS_MARKS
declare -a ANN_MARKS
declare -a GERMAN_MARKS
declare -a DM_MARKS
declare -a ML_MARKS
declare -a KRR_MARKS
declare -a GRADES

# Function to display the title
print_title() {
  echo -e "${CYAN}"
  echo "======================================"
  echo "         Student Management System    "
  echo "======================================"
  echo -e "${NC}"
}

# Function for user authentication
authenticate_user() {
  echo -n "Enter username: "
  read username
  echo -n "Enter password: "
  read -s password
  echo ""

  if [[ ${USERS[$username]} == "$password" ]]; then
    echo -e "${GREEN}Login successful!${NC}"
    return 0
  else
    echo -e "${RED}Invalid credentials. Exiting...${NC}"
    exit 1
  fi
}

# Function to calculate grade
calculate_grade() {
  local total_marks=$1
  if (( total_marks >= 90 )); then
    echo "A"
  elif (( total_marks >= 75 )); then
    echo "B"
  elif (( total_marks >= 50 )); then
    echo "C"
  else
    echo "F"
  fi
}

# Function to add a student
add_student() {
  echo -n "Enter Roll Number: "
  read roll
  echo -n "Enter Name: "
  read name

  # Enter marks for each subject
  echo -n "Enter Marks for Operating System (0-100): "
  read os_marks
  echo -n "Enter Marks for ANN (0-100): "
  read ann_marks
  echo -n "Enter Marks for German (0-100): "
  read german_marks
  echo -n "Enter Marks for Data Mining (0-100): "
  read dm_marks
  echo -n "Enter Marks for Machine Learning (0-100): "
  read ml_marks
  echo -n "Enter Marks for KRR (0-100): "
  read krr_marks

  # Validate marks for all subjects
  if [[ $os_marks -ge 0 && $os_marks -le 100 && \
        $ann_marks -ge 0 && $ann_marks -le 100 && \
        $german_marks -ge 0 && $german_marks -le 100 && \
        $dm_marks -ge 0 && $dm_marks -le 100 && \
        $ml_marks -ge 0 && $ml_marks -le 100 && \
        $krr_marks -ge 0 && $krr_marks -le 100 ]]; then
    
    # Calculate total marks and grade
    local total_marks=$((os_marks + ann_marks + german_marks + dm_marks + ml_marks + krr_marks))
    local grade=$(calculate_grade $total_marks)

    # Store data in arrays
    ROLL_NUMBERS+=("$roll")
    NAMES+=("$name")
    OS_MARKS+=("$os_marks")
    ANN_MARKS+=("$ann_marks")
    GERMAN_MARKS+=("$german_marks")
    DM_MARKS+=("$dm_marks")
    ML_MARKS+=("$ml_marks")
    KRR_MARKS+=("$krr_marks")
    GRADES+=("$grade")

    echo -e "${GREEN}Student added successfully!${NC}"
  else
    echo -e "${RED}Invalid marks. Please enter a value between 0 and 100 for each subject.${NC}"
  fi
}

# Function to list all students
list_students() {
  if [ ${#ROLL_NUMBERS[@]} -eq 0 ]; then
    echo -e "${YELLOW}No student records found.${NC}"
  else
    echo "===================================================================="
    echo "Roll Number | Name       | OS | ANN | German | DM | ML | KRR | Grade"
    echo "===================================================================="
    for i in "${!ROLL_NUMBERS[@]}"; do
      printf "%-12s | %-10s | %-3s | %-3s | %-6s | %-3s | %-3s | %-3s | %-5s\n" \
        "${ROLL_NUMBERS[$i]}" "${NAMES[$i]}" "${OS_MARKS[$i]}" "${ANN_MARKS[$i]}" \
        "${GERMAN_MARKS[$i]}" "${DM_MARKS[$i]}" "${ML_MARKS[$i]}" "${KRR_MARKS[$i]}" \
        "${GRADES[$i]}"
    done
    echo "===================================================================="
  fi
}

# Function to search for a student
search_student() {
  echo -n "Enter Roll Number to search: "
  read roll
  found=false
  for i in "${!ROLL_NUMBERS[@]}"; do
    if [ "${ROLL_NUMBERS[$i]}" == "$roll" ]; then
      echo -e "${CYAN}Student Found:${NC}"
      echo "Roll Number: ${ROLL_NUMBERS[$i]}"
      echo "Name: ${NAMES[$i]}"
      echo "Operating System Marks: ${OS_MARKS[$i]}"
      echo "ANN Marks: ${ANN_MARKS[$i]}"
      echo "German Marks: ${GERMAN_MARKS[$i]}"
      echo "Data Mining Marks: ${DM_MARKS[$i]}"
      echo "Machine Learning Marks: ${ML_MARKS[$i]}"
      echo "KRR Marks: ${KRR_MARKS[$i]}"
      echo "Grade: ${GRADES[$i]}"
      found=true
      break
    fi
  done

  if [ "$found" == false ]; then
    echo -e "${RED}No student found with Roll Number $roll.${NC}"
  fi
}

# Function to delete a student
delete_student() {
  echo -n "Enter Roll Number to delete: "
  read roll
  found=false
  for i in "${!ROLL_NUMBERS[@]}"; do
    if [ "${ROLL_NUMBERS[$i]}" == "$roll" ]; then
      unset ROLL_NUMBERS[$i]
      unset NAMES[$i]
      unset OS_MARKS[$i]
      unset ANN_MARKS[$i]
      unset GERMAN_MARKS[$i]
      unset DM_MARKS[$i]
      unset ML_MARKS[$i]
      unset KRR_MARKS[$i]
      unset GRADES[$i]
      echo -e "${GREEN}Student deleted successfully!${NC}"
      found=true
      break
    fi
  done

  if [ "$found" == false ]; then
    echo -e "${RED}No student found with Roll Number $roll.${NC}"
  fi

  # Re-index arrays
  ROLL_NUMBERS=("${ROLL_NUMBERS[@]}")
  NAMES=("${NAMES[@]}")
  OS_MARKS=("${OS_MARKS[@]}")
  ANN_MARKS=("${ANN_MARKS[@]}")
  GERMAN_MARKS=("${GERMAN_MARKS[@]}")
  DM_MARKS=("${DM_MARKS[@]}")
  ML_MARKS=("${ML_MARKS[@]}")
  KRR_MARKS=("${KRR_MARKS[@]}")
  GRADES=("${GRADES[@]}")
}

# Main menu
main_menu() {
  while true; do
    print_title
    echo "1. Add Student"
    echo "2. List Students"
    echo "3. Search Student"
    echo "4. Delete Student"
    echo "5. Exit"
    echo -n "Enter your choice: "
    read choice

    case $choice in
      1) add_student ;;
      2) list_students ;;
      3) search_student ;;
      4) delete_student ;;
      5) echo -e "${CYAN}Exiting...${NC}"; break ;;
      *) echo -e "${RED}Invalid choice. Please try again.${NC}" ;;
    esac
    echo ""
  done
}

# Entry point
clear
print_title
authenticate_user
main_menu
